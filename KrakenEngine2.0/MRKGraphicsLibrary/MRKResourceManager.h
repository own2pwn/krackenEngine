#pragma once
#include "MRKModel.h"
#include "MRKBuffer.h"
#include "MRKImage.h"

/*
 * The perspective projection matrix generated by GLM will use the OpenGL depth range of
 * -1.0 to 1.0 by default. We need to configure it to use the Vulkan range of 0.0 to 1.0
 * using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition.
 * 
 * This is done in the Visual Studio pre-processor settings
 */
#include "glm/glm.hpp"
#include "MRKDescriptor.h"

namespace mrk
{
    struct UniformBufferObject
    {
        glm::mat4 model; // Model to world
        glm::mat4 view;  // world to camera
        glm::mat4 proj;  // camera to ndc
    };

    class ResourceManager
    {
    public:
        struct loadInfo
        {
            loadInfo(char const* house_model_path, char const* house_model_texture_path, char const* vertex_shader_path, char const* fragment_shader_path)
                : houseModelPath(house_model_path),
                  houseModelTexturePath(house_model_texture_path),
                  vertexShaderPath(vertex_shader_path),
                  fragmentShaderPath(fragment_shader_path)
            {
            }

            char const * const houseModelPath;
            char const * const houseModelTexturePath;
            char const * const vertexShaderPath;
            char const * const fragmentShaderPath;
        };

        explicit ResourceManager() = default;
        ~ResourceManager();
        void load(loadInfo const & info);

        vk::ShaderModule const & getVertexShader() const;
        vk::ShaderModule const & getFragmentShader() const;
        mrk::Descriptor const & getDescriptor() const;
        mrk::Buffer const & getUniformBuffer() const;
		mrk::Buffer const & getVertexBuffer() const;
		mrk::Buffer const & getIndexBuffer() const;

    private:
        Model houseModel_; // Obviously this is NOT final. We will have an array of Models
        vk::ShaderModule vertexShader_;
        vk::ShaderModule fragmentShader_;
        mrk::Buffer houseVertexBuffer_;
        mrk::Buffer houseIndexBuffer_;
        mrk::Buffer houseUniformBuffer_;
        mrk::Image houseTexture_;
        mrk::Descriptor descriptor_;

        static vk::ShaderModule loadShaderModule(char const * const shaderPath);
    };
}
